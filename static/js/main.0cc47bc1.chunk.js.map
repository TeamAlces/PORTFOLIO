{"version":3,"sources":["app/Button/index.js","app/App.js","serviceWorker.js","index.js"],"names":["sizes","desktop","tablet","phone","media","Object","keys","reduce","acc","label","css","_templateObject","apply","arguments","List","styled","ul","_templateObject2","_templateObject3","props","horizontal","_templateObject4","Name","a","_templateObject5","Ruben","_templateObject6","Veronika","_templateObject7","Petter","_templateObject8","NameList","react_default","createElement","ink_default","duration","radius","Component","Headline","h1","App_templateObject","Wrapper","div","App_templateObject2","App","Button_NameList","Boolean","window","location","hostname","match","ReactDOM","render","src_app_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qxCAIA,IAAMA,EAAQ,CACZC,QAAS,IACTC,OAAQ,IACRC,MAAO,KAGHC,EAAQC,OAAOC,KAAKN,GAAOO,OAAO,SAACC,EAAKC,GAM5C,OALAD,EAAIC,GAAS,kBAAaC,YAAbC,IACUX,EAAMS,GAAS,GAChCC,IAAGE,WAAH,EAAAC,aAGCL,GACN,IAEGM,EAAOC,IAAOC,GAAVC,IAINb,EAAMD,MAJAe,KAMN,SAAAC,GAAK,OAAIA,EAAMC,YAAcV,YAApBW,OAOPC,EAAOP,IAAOQ,EAAVC,IAUN,SAAAL,GAAK,OAAIA,EAAMM,OAASf,YAAfgB,MAGT,SAAAP,GAAK,OAAIA,EAAMQ,UAAYjB,YAAlBkB,MAGT,SAAAT,GAAK,OAAIA,EAAMU,QAAUnB,YAAhBoB,OAKQC,mLAEjB,OACEC,EAAAT,EAAAU,cAACnB,EAAD,CAAMM,YAAU,GACdY,EAAAT,EAAAU,cAAA,UACED,EAAAT,EAAAU,cAACX,EAAD,CAAMG,OAAK,GAAX,QAEEO,EAAAT,EAAAU,cAACC,EAAAX,EAAD,CACEY,SAAU,KACVC,OAAQ,QAIdJ,EAAAT,EAAAU,cAAA,UACED,EAAAT,EAAAU,cAACX,EAAD,CAAMK,UAAQ,GAAd,WAEEK,EAAAT,EAAAU,cAACC,EAAAX,EAAD,CACEY,SAAU,KACVC,OAAQ,QAIdJ,EAAAT,EAAAU,cAAA,UACED,EAAAT,EAAAU,cAACX,EAAD,CAAMO,QAAM,GAAZ,SAEEG,EAAAT,EAAAU,cAACC,EAAAX,EAAD,CACEY,SAAU,KACVC,OAAQ,gBA3BgBC,mZChDtC,IAAMC,EAAWvB,IAAOwB,GAAVC,KAIRC,EAAU1B,IAAO2B,IAAVC,KAwBEC,mLATX,OACEZ,EAAAT,EAAAU,cAACQ,EAAD,KACET,EAAAT,EAAAU,cAACK,EAAD,cACAN,EAAAT,EAAAU,cAACY,EAAD,cALUR,aCVES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpB,EAAAT,EAAAU,cAACoB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0cc47bc1.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport Ink from 'react-ink';\r\n\r\nconst sizes = {\r\n  desktop: 992,\r\n  tablet: 768,\r\n  phone: 576,\r\n}\r\n\r\nconst media = Object.keys(sizes).reduce((acc, label) => {\r\n  acc[label] = (...args) => css`\r\n    @media (max-width: ${sizes[label] / 16}em) {\r\n      ${css(...args)}\r\n    }\r\n  `\r\n  return acc\r\n}, {})\r\n\r\nconst List = styled.ul`\r\n  list-style-type: none;\r\n  padding: 0;\r\n\r\n  ${media.phone`width: 100%;`};\r\n\r\n  ${props => props.horizontal && css`\r\n    li {\r\n      display: inline;\r\n    }\r\n  `}\r\n`;\r\n\r\nconst Name = styled.a`\r\n  background: transparent;\r\n  border-radius: 3px;\r\n  color: white;\r\n  margin: 0.5em 1em;\r\n  padding: 0.5em 0;\r\n  display: inline-block;\r\n  width: 175px;\r\n  position: relative;\r\n\r\n  ${props => props.Ruben && css`\r\n    background: #158FB2;\r\n  `}\r\n  ${props => props.Veronika && css`\r\n    background: #FF5185;\r\n  `}\r\n  ${props => props.Petter && css`\r\n    background: #CCBF18;\r\n  `}\r\n`;\r\n\r\nexport default class NameList extends Component {\r\n  render() {\r\n    return (\r\n      <List horizontal>\r\n        <li>\r\n          <Name Ruben>\r\n            Ruben\r\n            <Ink \r\n              duration={1400}\r\n              radius={800}\r\n            />\r\n          </Name>\r\n        </li>\r\n        <li>\r\n          <Name Veronika>\r\n            Veronika\r\n            <Ink \r\n              duration={1400}\r\n              radius={800}\r\n            />\r\n          </Name>\r\n        </li>\r\n        <li>\r\n          <Name Petter>\r\n            Petter\r\n            <Ink \r\n              duration={1400}\r\n              radius={800}\r\n            />\r\n          </Name>\r\n        </li>\r\n      </List>\r\n    );\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport styled from 'styled-components';\r\nimport NameList from './Button';\r\nimport './App.css';\r\n\r\nconst Headline = styled.h1`\r\n  font-size: 3em;\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  text-align: center;\r\n  background-color: #282c34;\r\n  min-height: 100vh;\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: calc(10px + 2vmin);\r\n  color: white;\r\n`;\r\n\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return (\r\n      <Wrapper>\r\n        <Headline>ALCES</Headline>\r\n        <NameList/>\r\n      </Wrapper>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}